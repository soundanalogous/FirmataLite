FirmataLite is a simplified version of Firmata by Hans-Christoph Steiner. Everything but the ability to send and receive Strings and Sysex messages has been stripped out.

This library is to be used as a serial protocol rather than a standalone sketch. The idea is to define interfaces for various components and sensors such as button, accelerometer, etc on both the SW app (running on PC/laptop) and Arduino and to pass the data in a SysEx packet (see SysEx proposal: http://firmata.org/wiki/Proposals#SysEx).

For example, it's better to debug a button on the arduino side rather than the PC. So in arduino, you could crate a Button base object that includes actions such as press, release, etc. Read the button, then send the state to the PC app upon change.

What follows are a couple of examples of how and why you'd want to use FirmataLite i this way, although I have yet to produce any concrete examples. All just theory at this point.

// constants in imaginary ButtonBase class
// class identifier 
BUTTON 0x01 // (value between 0x00 and 0x69)
// states
PRESSED 0x00
RELEASED 0x01

// properties
int action
É

int[1] data;
data[0] = PRESSED; // action

// send the data to the SW application
// params: class identifier, number of bytes to send, array
FirmataLite.sendSysex(BUTTON, 1, data);

In the SW application, create a ButtonBase class that implements the same interface.

As a more complex example, consider an accelerometer. There are analog versions, several I2C and SPI versions. Simply define an accelerometer interface and implement it both on the Arduino and your SW application, and use FirmataLite to send the data. This way you can worry about the exact implementation of the accelerometer on the Arduino side. Your SW application simply needs to know an accelerometer is being used, without the specifics of the particular accelerometer.

// imaginary AccelerometerBase class
// class identifier
ACCELEROMTER 0x08

// properties
x, y, z
gRange // range of the sensor in units of gravity (eg 2g, 2.5g, 4g)

// methods
// to be implemented in the sysexCallback function in your Arduino sketch
// these are used to start and stop reading the sensor from the SW app
start()
stop()

// assuming an "accelerometer" as an Arduino library instance for an accelerometer
É

x = accelerometer.x
y = accelerometer.y
z = accelerometer.z
gRange = accelerometer.range

data[4]
data[0] = x
data[1] = y
data[2] = z
data[3] = gRange

// send the packet
FirmataLite.sendSysex(ACCELEROMETER, 4, data);

the SW implementation then expects an accelerometer packet and can appropriately parse the values.

// imaginary SW application running on laptop connected to Arduino

switch (incomingDataPacket[0]) {
 case HW.ACCELEROMETER:
	// parse accelerometer data
	accelInstance.x = incomingDataPacket[1]
	accelInstance.y = incomingDataPacket[2]
	accelInstance.z = incomingDataPacket[3]
	accelInstance.gRange = incomingDataPacket[4]
	break
 case HW.COMPONENT:
	// some other component or sensor data (if you have any to implement)
	break
}
